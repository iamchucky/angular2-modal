/**
 * This file is generated by the Angular 2 template compiler.
 * Do not edit.
 */
/* tslint:disable */
"use strict";
var import1 = require('@angular/core/src/linker/view');
var import2 = require('@angular/core/src/linker/element');
var import3 = require('./css-backdrop');
var import4 = require('@angular/core/src/linker/view_utils');
var import6 = require('@angular/core/src/linker/view_type');
var import7 = require('@angular/core/src/change_detection/change_detection');
var import8 = require('@angular/core/src/linker/element_ref');
var import9 = require('@angular/core/src/security');
var import10 = require('@angular/core/src/metadata/view');
var import11 = require('@angular/core/src/linker/component_factory');
var renderType_CSSBackdrop_Host = null;
var _View_CSSBackdrop_Host0 = (function (_super) {
    __extends(_View_CSSBackdrop_Host0, _super);
    function _View_CSSBackdrop_Host0(viewUtils, parentInjector, declarationEl) {
        _super.call(this, _View_CSSBackdrop_Host0, renderType_CSSBackdrop_Host, import6.ViewType.HOST, viewUtils, parentInjector, declarationEl, import7.ChangeDetectorStatus.CheckAlways);
    }
    _View_CSSBackdrop_Host0.prototype.createInternal = function (rootSelector) {
        this._el_0 = this.selectOrCreateHostElement('css-backdrop', rootSelector, null);
        this._appEl_0 = new import2.AppElement(0, null, this, this._el_0);
        var compView_0 = viewFactory_CSSBackdrop0(this.viewUtils, this.injector(0), this._appEl_0);
        this._CSSBackdrop_0_4 = new import3.CSSBackdrop(new import8.ElementRef(this._el_0), this.renderer);
        this._appEl_0.initComponent(this._CSSBackdrop_0_4, [], compView_0);
        compView_0.create(this._CSSBackdrop_0_4, this.projectableNodes, null);
        this._expr_0 = import7.UNINITIALIZED;
        this._expr_1 = import7.UNINITIALIZED;
        this.init([].concat([this._el_0]), [this._el_0], [], []);
        return this._appEl_0;
    };
    _View_CSSBackdrop_Host0.prototype.injectorGetInternal = function (token, requestNodeIndex, notFoundResult) {
        if (((token === import3.CSSBackdrop) && (0 === requestNodeIndex))) {
            return this._CSSBackdrop_0_4;
        }
        return notFoundResult;
    };
    _View_CSSBackdrop_Host0.prototype.detectChangesInternal = function (throwOnChange) {
        this.detectContentChildrenChanges(throwOnChange);
        var currVal_0 = this._CSSBackdrop_0_4.cssClass;
        if (import4.checkBinding(throwOnChange, this._expr_0, currVal_0)) {
            this.renderer.setElementAttribute(this._el_0, 'class', ((currVal_0 == null) ? null : currVal_0.toString()));
            this._expr_0 = currVal_0;
        }
        var currVal_1 = this._CSSBackdrop_0_4.styleStr;
        if (import4.checkBinding(throwOnChange, this._expr_1, currVal_1)) {
            this.renderer.setElementAttribute(this._el_0, 'style', ((this.viewUtils.sanitizer.sanitize(import9.SecurityContext.STYLE, currVal_1) == null) ? null : this.viewUtils.sanitizer.sanitize(import9.SecurityContext.STYLE, currVal_1).toString()));
            this._expr_1 = currVal_1;
        }
        this.detectViewChildrenChanges(throwOnChange);
    };
    return _View_CSSBackdrop_Host0;
}(import1.AppView));
function viewFactory_CSSBackdrop_Host0(viewUtils, parentInjector, declarationEl) {
    if ((renderType_CSSBackdrop_Host === null)) {
        (renderType_CSSBackdrop_Host = viewUtils.createRenderComponentType('', 0, import10.ViewEncapsulation.None, [], {}));
    }
    return new _View_CSSBackdrop_Host0(viewUtils, parentInjector, declarationEl);
}
exports.CSSBackdropNgFactory = new import11.ComponentFactory('css-backdrop', viewFactory_CSSBackdrop_Host0, import3.CSSBackdrop);
var styles_CSSBackdrop = [];
var renderType_CSSBackdrop = null;
var _View_CSSBackdrop0 = (function (_super) {
    __extends(_View_CSSBackdrop0, _super);
    function _View_CSSBackdrop0(viewUtils, parentInjector, declarationEl) {
        _super.call(this, _View_CSSBackdrop0, renderType_CSSBackdrop, import6.ViewType.COMPONENT, viewUtils, parentInjector, declarationEl, import7.ChangeDetectorStatus.CheckAlways);
    }
    _View_CSSBackdrop0.prototype.createInternal = function (rootSelector) {
        var parentRenderNode = this.renderer.createViewRoot(this.declarationAppElement.nativeElement);
        this.init([], [], [], []);
        return null;
    };
    return _View_CSSBackdrop0;
}(import1.AppView));
function viewFactory_CSSBackdrop0(viewUtils, parentInjector, declarationEl) {
    if ((renderType_CSSBackdrop === null)) {
        (renderType_CSSBackdrop = viewUtils.createRenderComponentType('', 0, import10.ViewEncapsulation.None, styles_CSSBackdrop, {}));
    }
    return new _View_CSSBackdrop0(viewUtils, parentInjector, declarationEl);
}
exports.viewFactory_CSSBackdrop0 = viewFactory_CSSBackdrop0;
//# sourceMappingURL=css-backdrop.ngfactory.js.map