/**
 * This file is generated by the Angular 2 template compiler.
 * Do not edit.
 */
/* tslint:disable */
"use strict";
var import1 = require('@angular/core/src/linker/view');
var import2 = require('@angular/core/src/linker/element');
var import3 = require('./css-dialog-container');
var import4 = require('@angular/core/src/linker/view_utils');
var import6 = require('@angular/core/src/linker/view_type');
var import7 = require('@angular/core/src/change_detection/change_detection');
var import8 = require('../models/dialog-ref');
var import9 = require('@angular/core/src/linker/element_ref');
var import10 = require('@angular/core/src/metadata/view');
var import11 = require('@angular/core/src/linker/component_factory');
var renderType_CSSDialogContainer_Host = null;
var _View_CSSDialogContainer_Host0 = (function (_super) {
    __extends(_View_CSSDialogContainer_Host0, _super);
    function _View_CSSDialogContainer_Host0(viewUtils, parentInjector, declarationEl) {
        _super.call(this, _View_CSSDialogContainer_Host0, renderType_CSSDialogContainer_Host, import6.ViewType.HOST, viewUtils, parentInjector, declarationEl, import7.ChangeDetectorStatus.CheckAlways);
    }
    _View_CSSDialogContainer_Host0.prototype.createInternal = function (rootSelector) {
        this._el_0 = this.selectOrCreateHostElement('css-dialog-container', rootSelector, null);
        this.renderer.setElementAttribute(this._el_0, 'role', 'dialog');
        this.renderer.setElementAttribute(this._el_0, 'tabindex', '-1');
        this._appEl_0 = new import2.AppElement(0, null, this, this._el_0);
        var compView_0 = viewFactory_CSSDialogContainer0(this.viewUtils, this.injector(0), this._appEl_0);
        this._CSSDialogContainer_0_4 = new import3.CSSDialogContainer(this.parentInjector.get(import8.DialogRef), new import9.ElementRef(this._el_0), this.renderer);
        this._appEl_0.initComponent(this._CSSDialogContainer_0_4, [], compView_0);
        compView_0.create(this._CSSDialogContainer_0_4, this.projectableNodes, null);
        this.init([].concat([this._el_0]), [this._el_0], [], []);
        return this._appEl_0;
    };
    _View_CSSDialogContainer_Host0.prototype.injectorGetInternal = function (token, requestNodeIndex, notFoundResult) {
        if (((token === import3.CSSDialogContainer) && (0 === requestNodeIndex))) {
            return this._CSSDialogContainer_0_4;
        }
        return notFoundResult;
    };
    return _View_CSSDialogContainer_Host0;
}(import1.AppView));
function viewFactory_CSSDialogContainer_Host0(viewUtils, parentInjector, declarationEl) {
    if ((renderType_CSSDialogContainer_Host === null)) {
        (renderType_CSSDialogContainer_Host = viewUtils.createRenderComponentType('', 0, import10.ViewEncapsulation.None, [], {}));
    }
    return new _View_CSSDialogContainer_Host0(viewUtils, parentInjector, declarationEl);
}
exports.CSSDialogContainerNgFactory = new import11.ComponentFactory('css-dialog-container', viewFactory_CSSDialogContainer_Host0, import3.CSSDialogContainer);
var styles_CSSDialogContainer = [];
var renderType_CSSDialogContainer = null;
var _View_CSSDialogContainer0 = (function (_super) {
    __extends(_View_CSSDialogContainer0, _super);
    function _View_CSSDialogContainer0(viewUtils, parentInjector, declarationEl) {
        _super.call(this, _View_CSSDialogContainer0, renderType_CSSDialogContainer, import6.ViewType.COMPONENT, viewUtils, parentInjector, declarationEl, import7.ChangeDetectorStatus.CheckAlways);
    }
    _View_CSSDialogContainer0.prototype.createInternal = function (rootSelector) {
        var parentRenderNode = this.renderer.createViewRoot(this.declarationAppElement.nativeElement);
        this.renderer.projectNodes(parentRenderNode, import4.flattenNestedViewRenderNodes(this.projectableNodes[0]));
        this.init([], [], [], []);
        return null;
    };
    return _View_CSSDialogContainer0;
}(import1.AppView));
function viewFactory_CSSDialogContainer0(viewUtils, parentInjector, declarationEl) {
    if ((renderType_CSSDialogContainer === null)) {
        (renderType_CSSDialogContainer = viewUtils.createRenderComponentType('', 1, import10.ViewEncapsulation.None, styles_CSSDialogContainer, {}));
    }
    return new _View_CSSDialogContainer0(viewUtils, parentInjector, declarationEl);
}
exports.viewFactory_CSSDialogContainer0 = viewFactory_CSSDialogContainer0;
//# sourceMappingURL=css-dialog-container.ngfactory.js.map